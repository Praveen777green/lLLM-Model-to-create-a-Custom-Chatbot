import numpy as np
import tensorflow as tf
from transformers import AutoTokenizer, TFAutoModel

# Sample training data (expanded)
training_sentences = [
    "Hi",
    "Hello",
    "How are you",
    "Good morning",
    "Good evening",
    "Bye",
    "See you later",
    "Goodbye",
    "What is the time now",
    "What is your name",
    "Who are you",
    "What is the day today",
    "What is your favorite color",
    "Tell me a joke",
    "Can you help me with math",
    "What's the weather like today",
    "How do I get to the nearest airport",
    "What movies are playing nearby",
    "Recommend a good book",
    "How do I reset my password",
    "What's the latest news",
    "Tell me about yourself",
    "What's the meaning of life"
]

training_labels = [
    "greeting",
    "greeting",
    "general",
    "greeting",
    "greeting",
    "farewell",
    "farewell",
    "farewell",
    "time",
    "name",
    "name",
    "day",
    "general",
    "general",
    "general",
    "general",
    "general",
    "general",
    "general",
    "general",
    "general",
    "general",
    "general"
]

# Converting labels to numeric
label_tokenizer = tf.keras.preprocessing.text.Tokenizer()
label_tokenizer.fit_on_texts(training_labels)
label_index = label_tokenizer.word_index
label_sequences = np.array([label_index[label] - 1 for label in training_labels])  # Adjust for zero-indexing

# Load pre-trained tokenizer and model from Hugging Face Transformers
model_name = "distilbert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)
transformer_model = TFAutoModel.from_pretrained(model_name)

# Tokenize sentences using the transformer's tokenizer
def tokenize_sentences(sentences):
    return tokenizer(sentences, padding=True, truncation=True, return_tensors="tf")

tokenized_inputs = tokenize_sentences(training_sentences)
input_ids = tokenized_inputs['input_ids']
attention_mask = tokenized_inputs['attention_mask']

# Generate embeddings using the transformer model
def get_embeddings(input_ids, attention_mask):
    transformer_outputs = transformer_model(input_ids, attention_mask=attention_mask)
    last_hidden_state = transformer_outputs.last_hidden_state
    # Pool the outputs to get a fixed-size vector for each input
    pooled_output = tf.reduce_mean(last_hidden_state, axis=1)
    return pooled_output

embeddings = get_embeddings(input_ids, attention_mask)

# Build a classifier model on top of the embeddings
classifier_model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(embeddings.shape[1],)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(len(label_index), activation='softmax')  # Adjust for multi-class classification
])

classifier_model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the classifier model
classifier_model.fit(embeddings, label_sequences, epochs=50, verbose=2)

# Function to get response based on predicted label
def get_response(input_text):
    tokenized_input = tokenize_sentences([input_text])
    input_ids = tokenized_input['input_ids']
    attention_mask = tokenized_input['attention_mask']
    embedding = get_embeddings(input_ids, attention_mask)
    prediction = classifier_model.predict(embedding)
    predicted_label_index = np.argmax(prediction[0])
    
    # Map predicted label index back to label text
    predicted_label = list(label_index.keys())[list(label_index.values()).index(predicted_label_index + 1)]

    # Define responses based on predicted labels
    responses = {
        "greeting": "Hello! How can I assist you today?",
        "farewell": "Goodbye! Have a great day.",
        "general": "I'm here to help. What else would you like to know?",
        "time": "I don't have a clock, but you can check the time on your device.",
        "name": "I'm a chatbot created by Kumar. You can call me Kumarbot.",
        "day": "Today is a wonderful day!",
        "default": "I'm not sure how to respond to that."
    }

    return responses.get(predicted_label, responses["default"])

# Interactive chatbot loop
while True:
    user_input = input("You: ")
    if user_input.lower() in ['bye', 'exit', 'quit']:
        print("Kumarbot: Goodbye!")
        break
    response = get_response(user_input)
    print(f"Kumarbot: {response}")
